#!/bin/bash
#
# Title:      PGBlitz (Reference Title File)
# https://github.com/pi-hole/docker-pi-hole/blob/master/README.md
# https://www.smarthomebeginner.com/run-pihole-in-docker-on-ubuntu-with-reverse-proxy/
# Author(s):  artiume
# URL:        https://pgblitz.com - http://github.pgblitz.com
# GNU:        General Public License v3.0
################################################################################
---
- hosts: localhost
  gather_facts: false
  tasks:
    # FACTS #######################################################################
    
    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'pihole'
        intport: '80'
        extport: '9080'
        intport2: '53/udp'
        extport2: '53/udp'
        intport3: '67/udp'
        extport3: '67/udp'
        intport4: '53/tcp'
        extport4: '53/tcp'
        intport5: '443'
        extport5: '9443'
        image: 'pihole/pihole:latest'

    # CORE (MANDATORY) ############################################################
    - name: 'Including cron job'
      include_tasks: '/opt/communityapps/apps/_core.yml'

    # LABELS ######################################################################
    - name: 'Adding Traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          traefik.backend: "{{pgrole}}"
          traefik.port: '80'
          traefik.frontend.rule: 'HostRegexp:pihole.{{domain.stdout}},{catchall:.*}'
          traefik.frontend.priority: '1'
          traefik.frontend.headers.SSLRedirect: 'true'
          traefik.frontend.headers.STSSeconds: '315360000'
          traefik.frontend.headers.browserXSSFilter: 'true'
          traefik.frontend.headers.contentTypeNosniff: 'true'
          traefik.frontend.headers.forceSTSHeader: 'true'
          traefik.frontend.headers.SSLHost: '{{domain.stdout}}'
          traefik.frontend.headers.STSIncludeSubdomains: 'true'
          traefik.frontend.headers.STSPreload: 'true'
          #traefik.frontend.headers.frameDeny: 'true'

    # PRETASKS ####################################################################
    - name: Check log exists
      stat:
        path: '/opt/appdata/{{pgrole}}/pihole.log'
      register: logfile

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
          #- '/opt/appdata/{{pgrole}}/data:/data'
          #- '/opt/appdata/{{pgrole}}/database:/database'
          - 'opt/appdata/{{pgrole}}/etc-pihole:/etc/pihole/'
          - 'opt/appdata/{{pgrole}}/etc-dnsmasq.d:/etc/dnsmasq.d/'
        # run `touch ./var-log/pihole.log` first unless you like errors
          - '/opt/appdata/{{pgrole}}/pihole.log:/var/log/pihole.log'
          
    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: '1000'
          PGID: '1000'
          ServerIP: '${SERVER_IP}'
          PROXY_LOCATION: 'pihole'
          VIRTUAL_HOST: 'pihole.{{domain.stdout}}'
          VIRTUAL_PORT: '80'
          TZ: '${TZ}'
          WEBPASSWORD: 'password'
          DNS1: '127.0.0.1'
          DNS2: '1.1.1.1'

    - name: 'Cap add'
      set_fact:
          cap_add: 'NET_ADMIN'
          
    # MAIN DEPLOYMENT #############################################################
    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        pull: yes
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: unless-stopped
        networks:
          - name: plexguide
            aliases:
              - '{{pgrole}}'
        state: started
        labels: '{{pg_labels}}'
